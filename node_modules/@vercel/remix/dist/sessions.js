/**
 * @vercel/remix v2.10.0
 *
 * Copyright (c) Vercel, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const genRanHex = size => Array.from({
  length: size
}, () => Math.floor(Math.random() * 16).toString(16)).join("");
const createKvSessionStorageFactory = createSessionStorage => {
  return ({
    kv,
    cookie,
    prefix = "session"
  }) => {
    let createData = async (data, expires) => {
      while (true) {
        let baseId = genRanHex(16);
        let id = `${prefix}:${baseId}`;
        if ((await kv.exists(id)) === 0) {
          let str = JSON.stringify(data);
          if (expires) {
            await kv.set(id, str, {
              pxat: expires.getTime()
            });
          } else {
            await kv.set(id, str);
          }
          return id;
        }
      }
    };
    let readData = async id => {
      return (await kv.get(id)) ?? null;
    };
    let updateData = async (id, data, expires) => {
      let str = JSON.stringify(data);
      if (str === "{}") {
        // If the data is empty then delete the session key
        return deleteData(id);
      }
      if (expires) {
        await kv.set(id, str, {
          pxat: expires.getTime()
        });
      } else {
        await kv.set(id, str);
      }
    };
    let deleteData = async id => {
      await kv.del(id);
    };
    return createSessionStorage({
      cookie,
      createData,
      readData,
      updateData,
      deleteData
    });
  };
};

exports.createKvSessionStorageFactory = createKvSessionStorageFactory;
